screeplot(pca1)
summary(pca1)
pca1 <- princomp(data.frame(Stock_Data_Cl), cor=FALSE)
biplot(pca1, choices = 1:2, scale = 1, pc.biplot = FALSE)
screeplot(pca1)
knitr::opts_chunk$set(echo = TRUE)
pca1 <- princomp(data.frame(Stock_Data_Cl), cor=FALSE)
library(quantmod)
tickers <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DWDP",
"XOM", "GE", "GS", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD",
"MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ",
"V", "WMT", "DIS")
Stock_Data <- lapply(tickers,
function(x) getSymbols(x,auto.assign=FALSE,
from = "2017-01-01",
to = "2018-01-01"))
Stock_Data_Cl <- lapply(Stock_Data, function(x) Cl(x))
pca1 <- princomp(data.frame(Stock_Data_Cl), cor=FALSE)
biplot(pca1, cex=c(.75,1) )
screeplot(pca1)
pca1 <- princomp(data.frame(Stock_Data_Cl), cor=FALSE)
biplot(pca1, col = "blue" )
screeplot(pca1)
biplot(pca1, col = c("blue", "red") )
biplot(pca1, col = c("blue", "red"), labels = rownames(Stock_Data_Cl))
biplot(pca1, col = c("blue", "red"), labels = rownames(Stock_Data))
biplot(pca1, col = c("blue", "red"), labels = rownames(data.frame(Stock_Data_Cl)))
biplot(pca1, col = c("blue", "red"), pch=c(24,21))
biplot(pca1, col.var = "#2E9FDF", col.ind = "#696969")
biplot(pca1, col = c("#2E9FDF","#696969"))
biplot(pca1, col = c("#696969", "#2E9FDF"))
biplot(pca1, col = c("#696969", "#2E9FDF"), repel = TRUE)
summary(pca1)
biplot(pca1, col = c("#696969", "#2E9FDF"), scale = 0 )
biplot(pca1, col = c("#696969", "#2E9FDF"), scale = 2 )
biplot(pca1, col = c("#696969", "#2E9FDF"), scale = 1 )
biplot(pca1, col = c("#696969", "#2E9FDF"), scale = 1.5 )
biplot(pca1, col = c("#696969", "#2E9FDF"), var.axes = TRUE )
biplot(pca1, col = c("#696969", "#2E9FDF"), var.axes = F )
biplot(pca1, col = c("#696969", "#2E9FDF"), cex = rep(par("cex"), 2) )
biplot(pca1, col = c("#696969", "#2E9FDF"), cex = rep(par("cex"), 3) )
biplot(pca1, col = c("#696969", "#2E9FDF"), cex = rep(par("cex"), 6) )
biplot(pca1, col = c("#696969", "#2E9FDF"), arrow.len = 0.2)
biplot(pca1, col = c("#696969", "#2E9FDF"), arrow.len = 0.7)
biplot(pca1, col = c("#696969", "#2E9FDF"))
pca2 <- princomp(data.frame(Stock_Data_Cl), cor=TRUE)
summary(pca2)
biplot(pca2, col = c("#696969", "#2E9FDF"))
screeplot(pca2)
Stock_Data_return <- lapply(Stock_Data, function(x) dailyReturn(Cl(x)))
pca3 <- princomp(data.frame(Stock_Data_return), cor=TRUE)
summary(pca3)
biplot(pca3, col = c("#696969", "#2E9FDF"))
screeplot(pca3)
pca1 <- princomp(data.frame(Stock_Data_Cl), cor=FALSE)
summary(pca1)
biplot(pca1, col = c("#696969", "#2E9FDF"))
screeplot(pca1)
pca1 <- princomp(data.frame(Stock_Data_Cl), cor=FALSE)
summary(pca1)
biplot(pca1, col = c("#696969", "#2E9FDF"), scale = 0)
screeplot(pca1)
biplot(pca2, col = c("#696969", "#2E9FDF"), scale = 0)
biplot(pca3, col = c("#696969", "#2E9FDF"), scale = 0)
data.frame(Stock_Data_return)
Stock_Data
biplot(pca3, col = c("#696969", "#FF6347"), scale = 0)
biplot(pca2, col = c("#696969", "#FF6347"), scale = 0)
biplot(pca1, col = c("#696969", "#FF6347"), scale = 0)
#FF7F50
biplot(pca3, col = c("#FF7F50", "#FF6347"), scale = 0)
biplot(pca3, col = c("#C7C5C5", "#FF6347"), scale = 0)
biplot(pca3, col = c("#BABABA", "#FF6347"), scale = 0)
biplot(pca3, col = c("#ABABAB", "#FF6347"), scale = 0)
#ABABAB
biplot(pca1, col = c("#ABABAB", "#FF6347"), scale = 0)
biplot(pca2, col = c("#ABABAB", "#FF6347"), scale = 0)
pca1
summary(pca1)
library(quantmod)
tickers <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DWDP",
"XOM", "GE", "GS", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD",
"MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ",
"V", "WMT", "DIS")
Stock_Data <- lapply(tickers,
function(x) getSymbols(x,auto.assign=FALSE,
from = "2017-01-01",
to = "2018-01-01"))
Stock_Data_Cl <- data.frame(lapply(Stock_Data, function(x) Cl(x)))
Stock_Data_Cl
pca1 <- princomp(Stock_Data_Cl, cor=FALSE)
summary(pca1)
biplot(pca1, col = c("#ABABAB", "#FF6347"), scale = 0)
screeplot(pca1)
pca2 <- princomp(Stock_Data_Cl, cor=TRUE)
summary(pca2)
biplot(pca2, col = c("#ABABAB", "#FF6347"), scale = 0)
screeplot(pca2)
Stock_Data_return <- data.frame(lapply(Stock_Data, function(x) dailyReturn(Cl(x))))
pca3 <- princomp(Stock_Data_return, cor=TRUE)
summary(pca3)
biplot(pca3, col = c("#ABABAB", "#FF6347"), scale = 0)
screeplot(pca3)
screeplot(pca3, percent = T)
Stock_Data_return <- data.frame(lapply(Stock_Data, function(x) dailyReturn(Cl(x))))
pca3 <- princomp(Stock_Data_return, cor=TRUE)
summary(pca3)
biplot(pca3, col = c("#ABABAB", "#FF6347"), scale = 0)
screeplot(pca3)
install.packages("shiny")
library(shiny)
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
install.packages("leaflet")
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
install.packages("choroplethr")
install.packages("choroplethrZip", "rgdal")
install.packages("choroplethrZip")
install.packages(rgdal)
install.packages("rgdal")
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
install.packages("choroplethrZip")
library(choroplethrZip)
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
knitr::opts_chunk$set(echo = TRUE)
Company <- c("General Motors", "Ford", "Exxon", "IBM", "General Electric", "Mobil", "Phillip Morris", "Chrysler", "Du Pont", "Texaco")
Sales <- c(126974, 96933, 86656, 63438, 55265, 50976, 39069, 36156, 35209, 32416)
Profits <- c(4224, 3835, 3510, 3758, 3939, 1809, 2946, 359, 2480, 2413)
Assets <- c(173297, 160893, 83219, 77734, 128344, 39080, 38528, 51038, 34715, 25636)
data <- data.frame(Company, Sales, Profits, Assets)
data
hist(data)
boxplot(data)
boxplot(data[,2:4])
par(mfrow = c(1, 3))
boxplot(data[,2])
boxplot(data[,3])
boxplot(data[,4])
par(mfrow = c(1, 3))
boxplot(data[,2], xlab = "Sales")
boxplot(data[,3], xlab = "Profits")
boxplot(data[,4], xlab = "Assets")
summary(data)
summary(data[,2:4])
scatterplot(data)
scatterplotMatrix(data)
library(car)
scatterplotMatrix(data)
scatterplotMatrix(data[,2:4])
scatterplotMatrix(data[,2:4], smooth = F)
mean(data[,2:4])
mean(data)
summary(data[,2:4])[mean]
summary(data[,2:4])[4]
summary(data[,2:4])[,4]
summary(data[,2:4])[4,]
summary(data[,2:4])[4,]
sd(data[,2:4])
summary(data[,2:4])[4,]
sd(data)
summary(data[,2:4])[4,]
apply(data[,2:4], 2, sd)
# mean
summary(data[,2:4])[4,]
# sd
apply(data[,2:4], 2, sd)
# cor
apply(data[,2:4], 2. cor)
# mean
summary(data[,2:4])[4,]
# sd
apply(data[,2:4], 2, sd)
# cor
apply(data[,2:4], 2, cor)
# mean
summary(data[,2:4])[4,]
# sd
apply(data[,2:4], 2, sd)
# cor
sapply(data[,2:4], 2, cor)
cor(data)
cor(data[,2:4])
# mean
summary(data[,2:4])[4,]
# sd
apply(data[,2:4], 2, sd)
# cor
cor(data[,2:4])
knitr::include_graphics(/Users/crystal/Dropbox/MA/5223 Multivariate Stat/HW/HW2/hw2.png)
knitr::include_graphics("/Users/crystal/Dropbox/MA/5223 Multivariate Stat/HW/HW2/hw2.png")
knitr::include_graphics("/Users/crystal/Dropbox/MA/5223 Multivariate Stat/HW/HW2/hw2.png")
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
runApp('Desktop/5243-ADS/Spring2018-Project2-group-4/app')
setwd("~/Desktop/5243-ADS/Spring2018-Project2-group-4/app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rversion
R.Version()
server <- shinyServer(function(input, output) {
## acquire the coordinate from rjson file
getcoord <- function(x){## x is a name of some place
x <- fromJSON(getCoordinate(x))
return(x)
}
## output leaflet map to the id:map
output$map <- renderLeaflet({
m <- leaflet()
m <- m%>%addTiles()
if(input$selected == 'Loc'){
temp <- getcoord(input$Loc)
if(temp$status!=0){
output$Request <- renderText({
c('The location failed to be found')
})
m
}else{
output$Request <- renderText({
c('The location is found successfully')
})
m %>% addMarkers(lng=temp$result$location$lng,
lat=temp$result$location$lat,
popup = paste0(input$Loc,'--',temp$result$level))
}
}else{
temp1 <- getcoord(input$Start)
temp2 <- getcoord(input$End)
if(temp1$status==0&temp2$status==0){
output$Request <- renderText({
c('Both start point and end point are valid')
})
route <- getRoute(input$Start,input$End)
m%>%addPolylines(route$lon,route$lat)%>%
addMarkers(lng=route$lon[c(1,nrow(route))],
lat=route$lat[c(1,nrow(route))],
popup = c(paste0(input$Start,'--',temp1$result$level),
paste0(input$End,'--',temp2$result$level)))
}else{
output$Request <- renderText({
c('One or both of origin and destination is invalid')
})
}
}
})
})
library(shiny)
library(leaflet)
library(baidumap)
install.packages(baidumap)
install.packages("baidumap")
install.packages("rjson")
install.packages("rjson")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
google.chagoogle.charts.load("current", {"packages": ["map"]})rts.load("current", {"packages": ["map"]})
google.charts.load("current", {"packages": ["map"]})
google.charts.load("current", {"packages": ("map")})
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(icon("calendar"), icon("bed"),
icon("cog"), icon("bug")),
choiceValues =
list("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
library(shiny); runApp('Route acc Type.R')
install.packages("R.utils")
runApp('Route acc Type.R')
install.packages(c("dtplyr", "shinythemes"))
install.packages(c("dtplyr", "shinythemes"))
runApp()
?renderPlot
?reactive
?renderDataTable
runApp()
runApp()
runApp()
library(shiny); runApp('Route acc Type.R')
runApp()
runApp('~/Desktop/Spring2018-Project2-Group1/app')
?renderLeaflet
runApp('~/Desktop/manhattan starter')
runApp()
runApp()
runApp('~/Desktop/manhattan starter')
runApp('~/Desktop/Spring2018-Project2-Group1/app')
setwd("~/Documents/Columbia/GR5243/Spring2020-Project2-group-9/app")
runApp('~/Desktop/manhattan starter')
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.4.0')
library(choroplethrZip)
runApp('~/Desktop/manhattan starter')
runApp('~/Desktop/manhattan starter')
runApp()
runApp('~/Desktop/manhattan starter')
setwd("~/Documents/Columbia/GR5243/Spring2020-Project2-group-9/app")
runApp('~/Desktop/manhattan starter')
install.packages(c("formattable", "geosphere", "parcoords"))
library(readr)
na_drop <- read_csv("~/Documents/Columbia/GR5243/Spring2020-Project2-group-9/data/na_drop.csv")
View(na_drop)
title <- reactive({
return(na_drop[na_drop$title== input$title,])
})
runApp()
View(na_drop)
install.packages("mapproj")
runApp('~/Desktop/Spring2018-Project2-Group8/app')
runApp()
runApp()
r_colors <- rgb(t(col2rgb(colors()) / 255))
runApp()
runApp()
load("../../data/na_drop.csv")
load("../data/na_drop.csv")
read_csv("../data/na_drop.csv")
library(readr)
runApp()
runApp()
runApp()
runApp()
dataUpload <- reactiveFileReader(1000, session, '../data/na_drop.csv', read_csv)
dataUpload()
runApp()
runApp()
? actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
?addProviderTiles
runApp()
runApp()
runApp()
runApp()
?addAwesomeMarkers
runApp()
runApp()
runApp()
runApp()
na_drop <- read_csv("../data/na_drop.csv")
save(na_drop, file = "../data/na_drop.RData")
runApp()
?addCircleMarkers
map <- leaflet(title()) %>% setView(-98.35  , 39.48, zoom = 4) %>% addTiles() %>% addCircleMarkers(lng = ~lon, lat = ~lat)
runApp()
runApp()
load("../data/na_drop.RData")
runApp()
class(na_drop$lon)
runApp()
runApp()
?map
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Spring2018-Project2-Group8/app')
?map
help(package='maps')
runApp('~/Desktop/Spring2018-Project2-Group8/app')
runApp()
runApp()
runApp()
runApp()
?selectInput
unique(na_drop$title)
unique(na_drop$category)
?hr
runApp()
?wellPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Spring2018-Project2-Group5/app')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(unique(na_drop$borough))
length(unique(na_drop$Agency))
table(na_drop$Agency)
runApp('~/Desktop/Spring2018-Project2-Group1/app')
runApp('~/Desktop/Spring2018-Project2-Group5/app')
